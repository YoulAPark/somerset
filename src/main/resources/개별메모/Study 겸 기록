1. 사용자 점에서 MyBatis가 DB와 어떻게 상호작용하는지?
	(1) client의 요청(페이지 클릭)
	(2) Controller에서 Client의 모든 요청을 수용
		- Controller의 역할 
			1. 복잡한 작업 요청받기
			2. DB와 통신하는 작업
			3. 그 외 다양한 수많은 업무에 대한 요청 받음
			
	(3) Controller가 홀로 감당하면 deCoupling 현상이 발생하게 됨 (역할분담이 되어있지않아, 비효율적임)
		- Service 클래스가 이 때 역할을 하게 된다.
	(4) Service 클래스의 역할
		- Service -> Mapper Interface -> DB에 질의할 쿼리문을 관리하는 Mapper파일에 또 요청을 보냄 -> Mapper파일은 DB와 직접적으로 상호작용 -> 해당 과정의 역순으로 Client에게 보냄

		
2. log4jdbc-log4je 
	참고 : https://kafcamus.tistory.com/23
	(1) 사용하는 이유
	Spring에서 SQL문을 실행한 로그를 효과적이고 직관적으로 볼 수 있게 해주는 라이브러리
	무언가를 실행했을 경우 Console창에 테이블의 열과 행을 출력해서 보여준다.
	
	(2) 사용하는 방법 : 라이브러리 추가, 로그 설정 파일 추가, JDBC 연결 정보 설정
		1. build.gradle에 의존성 라이브러리 추가
			
			[내용]
			implementation group: 'org.bgee.log4jdbc-log4j2', name: 'log4jdbc-log4j2-jdbc4.1', version: '1.16'
		
		2. properties 모아져 있는 곳
			혹은 application.properties가 위치한 곳에 log4Jdbc관련 properties를 저장해야 한다.
		
			[파일명] : log4jdbc.log4j2.properties
			[내용]
			log4jdbc.spylogdelegator.name=net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator
			log4jdbc.dump.sql.maxlinelength=0
			
			* maxlinelength 값은 0~90까지 설정 가능 => 0이면 다 나옴
			* properties 파일은 New - Other - United Text File로 생성
			
		3. application.properties로 이동한다
		
		4. spring.datasource.driver-class-name 의 속성을 [내용]과 같이 변경한다.
			
			[내용]
			spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
		
		5. spring.datasource.url의 속성을 [내용]과 같이 변경한다.
		
		
3. build.gradle에 의존성 라이브러리 추가 하는 방법
	(1) https://mvnrepository.com/ 접속
	(2) 검색창에 원하는 라이브러리 검색 ex)log4Jdbc
	(3) 원하는 version 클릭
	(4) Gradle 클릭(사용하고 있는 걸로 누르면 됨)
	(5) 하단의 dependencies 복사한 후 build.gradle에 붙여넣기
	
4. mapper.xml의 역할
	DB 쿼리문을 관리하여 DB와 상호작용을 하는 역할을 한다.
	사용하기 위해선 applications.properties에 mapper-location 지정을 해줘야한다.
	